install_from_swirl("R Programming")
packages("swirl")
library(swirl)
install_from_swirl("R Programming")
swirl()
5+7
x<-5+7
x
y<-x-3
y
z<-c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt<-sqrt(z-1)
my_sqrt
my_div<-z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_div
getwd()
ls()
x<-9
ls()
dir()
?list.files
args(list.files)
old.dir<-wd()
old.dir<-getwd()
?dir.create
dir.create "C:/users/dlmautz/Documents/testdir"
dir.create("C:/users/dlmautz/Documents/testdir")
dir.create("testdir")
setwd("testdir")
?file.create
file.create("mytest.R")
dir()
list.files()
files.exists("mytest.R")
file.exists("mytest.R")
file.info("mytest.R")
?file.rename
file.rename("mytest.R","mytest2.R")
file.copy(mytest2.R,mytest3.R)
file.copy("mytest2.R","mytest3.R")
file.path("mytest3.R")
file.path(folder1,folder2)
?file.path
file.path("folder1","folder2","/")
file.path("folder1","folder2")
?dir.create
dir.create(file.path("testdir2","testdir3"),TRUE,TRUE)
?unlink
unlink("testdir2",TRUE)
setwd(old.dir)
unlink("testdir",TRUE)
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10,by=0.5)
my_seq<-seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with=my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
num_vect<-c(0.5,55,-10,6)
tf<-num_vect<1
tf
num_vect>=6
my_char<-c("My","name","is")
my_char
paste(my_char,collapse=" ")
my_name<-c(my_char,"Daniel Mautz")
my_name
pase(my_name,collapse=" ")
paste(my_name,collapse=" ")
paste("Hello","world!",sep=" ")
paste(1:3,c("X","Y","Z"),sep="")
paste(LETTERS,1:4,sep="-")
x<-c(44,NA,5,NA)
X*3
X
x*3
y<-rnorm(1000)
z<-rep(NA,1000)
my_data<-sample(c(y,z),100)
my_na <- is.na(my_data)
my_na
my_data==NA
sum(my_na)
my_data
0/0
inf-inf
Inf-Inf
x
x[1:10]
x[is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x)&x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect<-c(foo=11,bar=2,norf=NA)
vect
names(vect)
vect2<-c(11,2,NA)
names(vect2)<-c("foo","bar","norf")
indentical(vect,vect2)
identical(vect,vect2)
vect("bar")
vect["bar"]
vect[c("foo","bar")]
my_vector<-1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector)<- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix<-my_vector
?matrix
my_matrix2<-matrix(1:20,4,5)
identical(my_matrix,my_matrix2)
patients<-c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data <- data.frame(patients,my_matrix)
my_data
class(my_data)
cnames<-c("patient","age","weight","bp","rating","test")
colnames(my_data)<-cnames
my_data
TRUE==TRUE
(FALSE==TRUE)==FALSE
6==7
6<7
10<=10
5!=7
NOT 5==7
!5==7
FALSE&FALSE
TRUE & c(TRUE,FALSE,FALSE)
TRUE && c(TRUE,FALSE,FALSE)
TRUE | c(TRUE,FALSE,FALSE)
TRUE || c(TRUE,FALSE,FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins','twins')
xor(5==6,!FALSE)
ints<-sample(10)
ints
ints>5
which(ints)
which(ints>7)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor=11,num=5)
remainder(4,div=2)
args(remainder)
submit()
evaluate(stdev,c(1.4,3.6,7.9,8.8))
evaluate(standarddeviation,c(1.4,3.6,7.9,8.8))
evaluate(sd,c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1},6)
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){x[length(x)]},c(8,4,0))
?paste
paste("Programming","is","fun!")
submit()
telegram("yo","yo","yo")
submit()
submit()
submit()
mad_libs("place"="london","adjective"="blue","noun"="can")
submit()
"I" %p% "love" %p% "R!"
install.package("kernsmooth")
install.packages("kernsmooth")
install.packages("KernSmooth")
library(KernSmooth)
md
install.packages("rmarkdown")
source('~/Coursera R Programming - Assignment 2/ProgrammingAssignment2/cachematrix.R')
source('~/Coursera R Programming - Assignment 2/ProgrammingAssignment2/cachematrix.R')
testMatrix <- makeRandomSquareMatrix(5)
testMatrix
source('~/Coursera R Programming - Assignment 2/ProgrammingAssignment2/cachematrix.R')
source('~/Coursera R Programming - Assignment 2/ProgrammingAssignment2/cachematrix.R')
determinant(testMatrix)
det(testMatrix)
testMatrix <- Matrix (c(1,2,3,4,5,6,5,7,9),3,3)
testMatrix <- matrix(c(1,2,3,4,5,6,5,7,9),3,3)
determinant(testMatrix)
det(testMatrix)
source('~/Coursera R Programming - Assignment 2/ProgrammingAssignment2/cachematrix.R')
source('~/Coursera R Programming - Assignment 2/ProgrammingAssignment2/cachematrix.R')
testMatrix <- makeRandomSquareMatrix()
testMatrix
source('~/Coursera R Programming - Assignment 2/ProgrammingAssignment2/cachematrix.R')
source('~/Coursera R Programming - Assignment 2/ProgrammingAssignment2/cachematrix.R')
testMatrixInv <- cacheSolve(testMatrix)
source('~/Coursera R Programming - Assignment 2/ProgrammingAssignment2/cachematrix.R')
testMatrixInv <- cacheSolve(testMatrix)
makeCacheMatrix
makeCacheMatrix()
testMatrixInv <- cacheSolve(testMatrix)
x <- makeCachedMatrix(testMatrix)
x <- makeCacheMatrix(testMatrix)
testMatrixInv <- cacheSolve(testMatrix)
testMatrixInv <- cacheSolve(x)
testMatrix <- matrix(c(-1, -2, 1, 1), 2,2)
x <- makeCacheMatrix(testMatrix)
x$get()
testMatrixInv <- cacheSolve(x)
testMatrixInv
testMatrixInv <- cacheSolve(x)
testMatrixInv
testMatrix %*% testMatrixInv
testMatrix <- makeRandomSquareMatrix(10)
x <- makeCacheMatrix(testMatrix)
testMatrixInv <- cacheSolve(x)
testMatrix %*% testMatrixInv
testMatrixInv <- cacheSolve(x)
diag(10) == testMatrix %*% testMatrixInv
diag(1)
diag(10)
diag(10) == round(testMatrix %*% testMatrixInv,10)
round(testMatrix %*% testMatrixInv,10)
setwd("~/Coursera Cleaning Data - Course Project")
source('~/Coursera Cleaning Data - Course Project/run_analysis.R')
source('~/Coursera Cleaning Data - Course Project/run_analysis.R')
source('~/Coursera Cleaning Data - Course Project/run_analysis.R')
library(plyr)
# One R script called run_analysis.R that does the following
# 1. Merges the training and test sets to create one data set
#
# Merge the training and test sets for the 'x' variable
x_merged <- rbind(read.table("UCI HAR Dataset/train/X_train.txt"), read.table("UCI HAR Dataset/test/X_test.txt"))
#
# Merge the training and test sets for the 'y' variable
y_merged <- rbind(read.table("UCI HAR Dataset/train/y_train.txt"), read.table("UCI HAR Dataset/test/y_test.txt"))
#
# Merge the training and test sets for the 'subject' data
s_merged <- rbind(read.table("UCI HAR Dataset/train/subject_train.txt"), read.table("UCI HAR Dataset/test/subject_test.txt"))
source('~/Coursera Cleaning Data - Course Project/run_analysis.R')
source('~/Coursera Cleaning Data - Course Project/run_analysis.R')
activity_labels <- read.table("UCI HAR Dataset/activity_labels.txt")
